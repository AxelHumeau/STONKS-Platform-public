#!/bin/bash

# Script de test complet pour la plateforme Tokenized Asset Management
# Ce script ex√©cute tous les tests et validations n√©cessaires

set -e  # Arr√™ter en cas d'erreur

echo "üß™ D√©marrage des tests complets de la plateforme Tokenized Asset Management"
echo "=================================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
print_status "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

NODE_VERSION=$(node --version)
print_success "Node.js version: $NODE_VERSION"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

NPM_VERSION=$(npm --version)
print_success "npm version: $NPM_VERSION"

# V√©rifier Foundry
if ! command -v forge &> /dev/null; then
    print_error "Foundry n'est pas install√©"
    exit 1
fi

FORGE_VERSION=$(forge --version)
print_success "Foundry version: $FORGE_VERSION"

# V√©rifier PostgreSQL
if ! command -v psql &> /dev/null; then
    print_warning "PostgreSQL n'est pas install√© - certains tests peuvent √©chouer"
fi

print_success "Pr√©requis v√©rifi√©s"
echo ""

# Installation des d√©pendances
print_status "Installation des d√©pendances..."
npm run install:all
print_success "D√©pendances install√©es"
echo ""

# Tests des contrats
print_status "Ex√©cution des tests des contrats..."
cd contracts

# Compilation
print_status "Compilation des contrats..."
forge build
print_success "Contrats compil√©s"

# Tests unitaires
print_status "Ex√©cution des tests unitaires..."
forge test
print_success "Tests unitaires r√©ussis"

# Tests de couverture
print_status "Ex√©cution des tests de couverture..."
forge coverage
print_success "Tests de couverture termin√©s"

cd ..
echo ""

# Tests du backend
print_status "Ex√©cution des tests du backend..."
cd backend

# V√©rification de la configuration
if [ ! -f ".env" ]; then
    print_warning "Fichier .env manquant, copie de l'exemple..."
    cp env.example .env
fi

# Tests Jest
print_status "Ex√©cution des tests Jest..."
npm run test
print_success "Tests Jest r√©ussis"

# Linting
print_status "Ex√©cution du linting..."
npm run lint
print_success "Linting r√©ussi"

# Build
print_status "Build de production..."
npm run build
print_success "Build r√©ussi"

cd ..
echo ""

# Tests du frontend
print_status "Ex√©cution des tests du frontend..."
cd frontend

# V√©rification de la configuration
if [ ! -f ".env.local" ]; then
    print_warning "Fichier .env.local manquant, copie de l'exemple..."
    cp env.local.example .env.local
fi

# Linting
print_status "Ex√©cution du linting..."
npm run lint
print_success "Linting r√©ussi"

# Type checking
print_status "V√©rification des types..."
npm run type-check
print_success "V√©rification des types r√©ussie"

# Build
print_status "Build de production..."
npm run build
print_success "Build r√©ussi"

cd ..
echo ""

# Tests d'int√©gration
print_status "Ex√©cution des tests d'int√©gration..."

# V√©rifier que les services peuvent d√©marrer
print_status "Test de d√©marrage des services..."

# Test du backend
cd backend
timeout 10s npm run start &
BACKEND_PID=$!
sleep 5

if ps -p $BACKEND_PID > /dev/null; then
    print_success "Backend d√©marr√© avec succ√®s"
    kill $BACKEND_PID
else
    print_error "√âchec du d√©marrage du backend"
    exit 1
fi

cd ..

# Test du frontend
cd frontend
timeout 10s npm run start &
FRONTEND_PID=$!
sleep 5

if ps -p $FRONTEND_PID > /dev/null; then
    print_success "Frontend d√©marr√© avec succ√®s"
    kill $FRONTEND_PID
else
    print_error "√âchec du d√©marrage du frontend"
    exit 1
fi

cd ..

print_success "Tests d'int√©gration r√©ussis"
echo ""

# Validation de la configuration
print_status "Validation de la configuration..."

# V√©rifier les fichiers de configuration
CONFIG_FILES=(
    "contracts/foundry.toml"
    "backend/package.json"
    "frontend/package.json"
    "docker-compose.yml"
    "README.md"
    "DEPLOYMENT.md"
)

for file in "${CONFIG_FILES[@]}"; do
    if [ -f "$file" ]; then
        print_success "Fichier de configuration trouv√©: $file"
    else
        print_error "Fichier de configuration manquant: $file"
        exit 1
    fi
done

print_success "Configuration valid√©e"
echo ""

# R√©sum√© des tests
print_status "R√©sum√© des tests"
echo "=================="
print_success "‚úÖ Tests des contrats (Foundry)"
print_success "‚úÖ Tests du backend (Jest)"
print_success "‚úÖ Tests du frontend (Next.js)"
print_success "‚úÖ Linting et formatage"
print_success "‚úÖ Build de production"
print_success "‚úÖ Tests d'int√©gration"
print_success "‚úÖ Validation de la configuration"

echo ""
print_success "üéâ Tous les tests sont pass√©s avec succ√®s !"
print_status "La plateforme Tokenized Asset Management est pr√™te pour le d√©ploiement."

echo ""
print_status "Prochaines √©tapes recommand√©es :"
echo "1. Configurer les variables d'environnement (.env files)"
echo "2. D√©ployer les contrats sur Sepolia"
echo "3. Configurer la base de donn√©es PostgreSQL"
echo "4. D√©marrer les services en production"
echo "5. V√©rifier la connectivit√© et les fonctionnalit√©s"

echo ""
print_status "Pour plus d'informations, consultez :"
echo "- README.md : Documentation g√©n√©rale"
echo "- DEPLOYMENT.md : Guide de d√©ploiement d√©taill√©"
echo "- Issues GitHub : Support et questions"
