#!/bin/bash

# Script de d√©ploiement sur Sepolia pour la plateforme Tokenized Asset Management
# Ce script d√©ploie tous les contrats et configure l'environnement

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©ploiement sur Sepolia - Tokenized Asset Management Platform"
echo "=============================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
print_status "V√©rification des pr√©requis..."

# V√©rifier Foundry
if ! command -v forge &> /dev/null; then
    print_error "Foundry n'est pas install√©"
    exit 1
fi

# V√©rifier les variables d'environnement
if [ -z "$SEPOLIA_RPC_URL" ]; then
    print_error "SEPOLIA_RPC_URL n'est pas d√©fini"
    exit 1
fi

if [ -z "$DEPLOYER_PRIVATE_KEY" ]; then
    print_error "DEPLOYER_PRIVATE_KEY n'est pas d√©fini"
    exit 1
fi

if [ -z "$ORACLE_SIGNER_KEY" ]; then
    print_error "ORACLE_SIGNER_KEY n'est pas d√©fini"
    exit 1
fi

if [ -z "$ORACLE_SIGNER_ADDRESS" ]; then
    print_error "ORACLE_SIGNER_ADDRESS n'est pas d√©fini"
    exit 1
fi

if [ -z "$UNISWAP_ROUTER_ADDRESS" ]; then
    print_error "UNISWAP_ROUTER_ADDRESS n'est pas d√©fini"
    exit 1
fi

print_success "Variables d'environnement v√©rifi√©es"
echo ""

# Pr√©paration du d√©ploiement
print_status "Pr√©paration du d√©ploiement..."

cd contracts

# Compilation
print_status "Compilation des contrats..."
forge build
print_success "Contrats compil√©s"

# Tests
print_status "Ex√©cution des tests..."
forge test
print_success "Tests r√©ussis"

# D√©ploiement
print_status "D√©ploiement des contrats sur Sepolia..."
forge script script/Deploy.s.sol --rpc-url $SEPOLIA_RPC_URL --private-key $DEPLOYER_PRIVATE_KEY --broadcast --verify
print_success "Contrats d√©ploy√©s et v√©rifi√©s"

# R√©cup√©ration des adresses d√©ploy√©es
print_status "R√©cup√©ration des adresses des contrats..."

# Note: En production, il faudrait parser la sortie de forge script
# Pour ce script, nous supposons que les adresses sont affich√©es
print_warning "Veuillez noter les adresses des contrats d√©ploy√©s :"
echo "KYCRegistry: [√† remplir]"
echo "FundToken: [√† remplir]"
echo "CertificateNFT: [√† remplir]"
echo "Oracle: [√† remplir]"
echo "DexIntegrationHelper: [√† remplir]"

cd ..
echo ""

# Configuration des services
print_status "Configuration des services..."

# Mise √† jour des fichiers .env
print_status "Mise √† jour des fichiers de configuration..."

# Backend
if [ -f "backend/.env" ]; then
    print_status "Mise √† jour de backend/.env..."
    # Note: En production, il faudrait automatiser cette mise √† jour
    print_warning "Veuillez mettre √† jour backend/.env avec les adresses des contrats"
else
    print_warning "Fichier backend/.env manquant, copie de l'exemple..."
    cp backend/env.example backend/.env
fi

# Frontend
if [ -f "frontend/.env.local" ]; then
    print_status "Mise √† jour de frontend/.env.local..."
    # Note: En production, il faudrait automatiser cette mise √† jour
    print_warning "Veuillez mettre √† jour frontend/.env.local avec les adresses des contrats"
else
    print_warning "Fichier frontend/.env.local manquant, copie de l'exemple..."
    cp frontend/env.local.example frontend/.env.local
fi

echo ""

# Test de connectivit√©
print_status "Test de connectivit√©..."

# Test RPC
print_status "Test de la connexion RPC..."
RPC_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
  --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
  $SEPOLIA_RPC_URL)

if echo "$RPC_RESPONSE" | grep -q "result"; then
    print_success "Connexion RPC r√©ussie"
else
    print_error "√âchec de la connexion RPC"
    exit 1
fi

echo ""

# Instructions post-d√©ploiement
print_status "Instructions post-d√©ploiement"
echo "=================================="

print_warning "√âtapes manuelles requises :"
echo "1. Mettre √† jour les adresses des contrats dans :"
echo "   - backend/.env"
echo "   - frontend/.env.local"
echo ""
echo "2. Configurer la base de donn√©es PostgreSQL :"
echo "   - Cr√©er la base de donn√©es"
echo "   - Ex√©cuter les migrations Prisma"
echo ""
echo "3. D√©marrer les services :"
echo "   - Backend: npm run start"
echo "   - Frontend: npm run start"
echo "   - Indexer: npm run indexer:start"
echo ""
echo "4. Tester les fonctionnalit√©s :"
echo "   - Connexion wallet"
echo "   - Soumission KYC"
echo "   - Mint de tokens"
echo "   - Trading DEX"

echo ""
print_success "üéâ D√©ploiement sur Sepolia termin√© !"
print_status "La plateforme est maintenant d√©ploy√©e sur le testnet Sepolia."

echo ""
print_status "Ressources utiles :"
echo "- Etherscan Sepolia: https://sepolia.etherscan.io/"
echo "- Documentation: README.md"
echo "- Guide de d√©ploiement: DEPLOYMENT.md"
echo "- Support: GitHub Issues"

echo ""
print_warning "N'oubliez pas de :"
echo "- Sauvegarder les cl√©s priv√©es en s√©curit√©"
echo "- Tester toutes les fonctionnalit√©s"
echo "- Monitorer les transactions"
echo "- Documenter les adresses des contrats"
